shader(type = fragment);

input(id = 0) vec3 tint;
input(id = 1) vec2 uv;
input(id = 2, flat) uint quad_id;
input(id = 3, flat) uint texture_id0;
input(id = 4, flat) uint texture_id1;
input(id = 5, flat) uint alpha_clipping;
output(id = 0) vec4 colour;
output(id = 1) vec4 bloom_colour;

struct quad_data
{
	mat4 model;
	vec3 colour;
	uint texture_id0;
	uint texture_id1;
	int layer;
	uint unused[3];
};

struct quad_extra_data
{
	uint emissive;
};

buffer(id = 0) const quad
{
	quad_data data[];
};

buffer(id = 1) const camera
{
	mat4 projection;	
};

buffer(id = 2) const settings
{
	uint64_t value;
};

buffer(id = 3) const extra
{
	quad_extra_data data[];
};

void main()
{
	vec4 frag_colour = vec4(tint, 0.0f);
	vec4 bloom = vec4(tint, 0.0f);
	if(texture_id0 != -1)
	{
		vec4 texcol = sample(texture_id0, uv);
		frag_colour.a = texcol.a;
		if(alpha_clipping > 0 && texcol.a < 0.05f)
		{
			discard;
		}
		frag_colour.xyz *= texcol.xyz;
	}
	if(extra.data[quad_id].emissive != 0 && texture_id1 != -1)
	{
		vec4 bloom_sample = sample(texture_id1, uv);
		bloom.xyz *= bloom_sample.xyz;
		if(alpha_clipping > 0 && bloom_sample.a > 0.05f)
		{
			bloom_colour = bloom;
			colour = vec4(0.0f);
		}
		else
		{
			bloom_colour = vec4(0.0f);
			colour = frag_colour;
		}
	}
	else
	{
		bloom_colour = vec4(0.0f);
		colour = frag_colour;
	}
}
